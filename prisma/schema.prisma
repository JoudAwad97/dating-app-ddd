// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  email       String    @unique
  profilesIds String[]
  password    String
  profiles    Profile[]
}

model Profile {
  id               String    @id @default(uuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  bio              String?
  name             String
  accountId        String
  account          Account   @relation(fields: [accountId], references: [id])
  pictures         Picture[]
  chats            Chat[]
  outgoingLikes    Like[]    @relation("ProfileToOutgoingLikes")
  incomingLikes    Like[]    @relation("ProfileToIncomingLikes")
  outgoingDisLikes Dislike[] @relation("ProfileToOutgoingDisLikes")
  incomingDisLikes Dislike[] @relation("ProfileToIncomingDislikes")
  outgoingReports  Report[]  @relation("ProfileToOutgoingReports")
  incomingReports  Report[]  @relation("ProfileToIncomingReports")
}

model Picture {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  url       String
  status    PictureStatus
  profileId String
  profile   Profile       @relation(fields: [profileId], references: [id])
}

model Like {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  status          InteractionStatus @default(SENT)
  sourceProfileId String
  targetProfileId String
  targetProfile   Profile           @relation(fields: [targetProfileId], references: [id], name: "ProfileToIncomingLikes")
  sourceProfile   Profile           @relation(fields: [sourceProfileId], references: [id], name: "ProfileToOutgoingLikes")
}

model Dislike {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  sourceProfileId String
  targetProfileId String
  targetProfile   Profile  @relation(fields: [targetProfileId], references: [id], name: "ProfileToIncomingDislikes")
  sourceProfile   Profile  @relation(fields: [sourceProfileId], references: [id], name: "ProfileToOutgoingDisLikes")
}

model Report {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  reason          String
  sourceProfileId String
  targetProfileId String
  targetProfile   Profile  @relation(fields: [targetProfileId], references: [id], name: "ProfileToIncomingReports")
  sourceProfile   Profile  @relation(fields: [sourceProfileId], references: [id], name: "ProfileToOutgoingReports")
}

model Chat {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      ChatTypes
  memberIds String[]
  members   Profile[]
}

enum ChatTypes {
  PRIVATE
  GROUP
}

enum PictureStatus {
  PENDING_VALIDATION
  ACTIVE
  INACTIVE
}

enum InteractionStatus {
  SENT
  RECIPROCATED
  DISLIKED
}
