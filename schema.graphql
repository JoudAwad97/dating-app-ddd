# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AccountCreateInput {
  email: String!
  password: String!
}

type AccountResponseDto {
  createdAt: String!
  email: String!
  id: String!
  updatedAt: String!
}

input AccountUpdateDto {
  email: String!
  id: String!
  password: String
}

input CreateDislikeDto {
  sourceProfileId: String!
  targetProfileId: String!
}

input CreateImageDto {
  profileId: String!
  url: String!
}

input CreateLikeDto {
  sourceProfileId: String!
  targetProfileId: String!
}

input DeleteImageDto {
  imageId: String!
}

type DislikeResponseDto {
  createdAt: String!
  id: String!
  sourceProfileId: String!
  targetProfileId: String!
  updatedAt: String!
}

type ImageResponseDto {
  createdAt: String!
  id: String!
  profileId: String!
  status: ImageStatus!
  updatedAt: String!
  url: String!
}

"""Image status"""
enum ImageStatus {
  ACTIVE
  INACTIVE
  PENDING_VALIDATION
}

"""Like interaction status"""
enum LikeInteractionStatus {
  RECIPROCATED
  SENT
}

type LikeResponseDto {
  status: LikeInteractionStatus!
}

type Mutation {
  createAccount(input: AccountCreateInput!): AccountResponseDto!
  createImage(input: CreateImageDto!): ImageResponseDto!
  createProfile(input: ProfileCreateDto!): ProfileResponseDto!
  deleteImage(input: DeleteImageDto!): Boolean!
  dislikeProfile(input: CreateDislikeDto!): DislikeResponseDto!
  likeProfile(input: CreateLikeDto!): LikeResponseDto!
  updateAccount(input: AccountUpdateDto!): AccountResponseDto!
  updateProfile(input: ProfileUpdateDto!): ProfileResponseDto!
}

type PageInfo {
  """
  The total number of items in the collection, not just the current page.
  """
  count: Int!

  """
  The cursor of the last item in the list. Use this to get the next page.
  """
  cursor: String
  hasNextPage: Boolean!
  take: Float!
}

input ProfileCreateDto {
  accountId: String!
  bio: String
  name: String!
}

type ProfilePaginatedResponseDto {
  data: [ProfileResponseDto!]!
  pageInfo: PageInfo!
}

type ProfileResponseDto {
  accountId: String!
  bio: String
  createdAt: String!
  id: String!
  images: [ImageResponseDto!]!
  name: String!
  updatedAt: String!
}

input ProfileUpdateDto {
  bio: String
  name: String!
  profileId: String!
}

type Query {
  getProfile(id: String!): ProfileResponseDto!
  hello: String!
  whoLikesMe(input: WhoLikesMeDto!): ProfilePaginatedResponseDto!
}

input WhoLikesMeDto {
  cursor: String
  profileId: String!
  take: Float!
}